/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package accountgen.controller;

import accountgen.model.Address;
import accountgen.model.Person;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author namishah
 */
public class Database {
    private static Database _instance = null;
    private static Connection _connection = null;
    
    public static Database getInstance(){
        if(_instance == null){
            _instance = new Database();
        }
        return _instance;
    }
    
    
    public void openConnection() throws ClassNotFoundException, SQLException{
        Class.forName("com.mysql.jdbc.Driver");
        _connection = DriverManager.getConnection("jdbc:mysql://localhost/account?user=root&password=root");
    }
    
    public void closeConnection(){
        try {
            _connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(Database.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public int getDBSize() throws ClassNotFoundException, SQLException{
        int size = 0;
        openConnection();
        try (PreparedStatement stmt = _connection.prepareStatement("SELECT DISTINCT COUNT(idperson) FROM person")){
            ResultSet rs = stmt.executeQuery();
            while(rs.next()) {
                size = rs.getInt(1);
            }
        }
        closeConnection();
        return size;
    }
    
    public void insertAccount(Person p) throws ClassNotFoundException, SQLException{
        //openConnection();
        
        String personSql = 
                    "insert into person(idperson, firstname, middlename, lastname, idaddress, phone, email, inbox, username, password, mmn, birthday, mastercard, expires, cvc2, ssn, favoritecolor, occupation, company, website, vehicle, upsnr, bloodtype, weight, height, guid, geoco) "+
                    "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        String addressSql = 
                    "insert into address(idaddress, streetname, streetnumber, postcode, state) "+
                    "values (?, ?, ?, ?, ?)";
        int autoGeneratedID = 0;
        try(PreparedStatement stmt = _connection.prepareStatement(addressSql, Statement.RETURN_GENERATED_KEYS)){
            stmt.setNull(1, Types.INTEGER);
            stmt.setString(2, p.getAdress().getStreetname());
            stmt.setInt(3, Integer.parseInt(p.getAdress().getStreetnumber()));
            stmt.setInt(4, Integer.parseInt(p.getAdress().getPostcode()));
            stmt.setString(5, p.getAdress().getState());
            stmt.executeUpdate();
            ResultSet rs = stmt.getGeneratedKeys();
            if (rs.next()) {
               autoGeneratedID = rs.getInt(1);
            }
        }
        try (PreparedStatement stmt = _connection.prepareStatement(personSql)){
            Date bd = new Date();
            bd.setDate(p.getBirthday().getDate());
            bd.setMonth(p.getBirthday().getMonth());
            bd.setYear(p.getBirthday().getYear()-1900); //setYear() does +1900
            stmt.setNull(1, Types.INTEGER);
            stmt.setString(2, p.getFirstname());
            stmt.setString(3, p.getMiddlename());
            stmt.setString(4, p.getLastname());
            stmt.setInt(5, autoGeneratedID);
            stmt.setString(6, p.getPhone());
            stmt.setString(7, p.getEmail());
            stmt.setString(8, p.getInbox());
            stmt.setString(9, p.getUsername());
            stmt.setString(10, p.getPassword());
            stmt.setString(11, p.getMmn());
            stmt.setDate(12, new java.sql.Date(bd.getTime()));
            stmt.setString(13, p.getMastercard());
            stmt.setDate(14, new java.sql.Date(p.getExpires().getTime()));
            stmt.setString(15, p.getCvc2());
            stmt.setString(16, p.getSsn());
            stmt.setString(17, p.getFavoritecolor());
            stmt.setString(18, p.getOccupation());
            stmt.setString(19, p.getCompany());
            stmt.setString(20, p.getWebsite());
            stmt.setString(21, p.getVehicle());
            stmt.setString(22, p.getUpsnr());
            stmt.setString(23, p.getBloodtype());
            stmt.setString(24, p.getWeight());
            stmt.setString(25, p.getHeight());
            stmt.setString(26, p.getGuid());
            stmt.setString(27, p.getGeoco());
            stmt.executeUpdate();
        }
        //closeConnection();
    }
    
    public Person getPerson(int id) throws SQLException, ClassNotFoundException{
        openConnection();
        List<Person> persons = new ArrayList<>();
        PreparedStatement stmt = _connection.prepareStatement("SELECT firstname, lastname, phone, email, inbox, birthday, a.postcode, a.state, a.streetname, a.streetnumber FROM person p JOIN address a ON a.idaddress = p.idaddress WHERE idperson = ?");
        stmt.setInt(1, id);
        ResultSet rs = stmt.executeQuery();
        while(rs.next()) {
            Person p = new Person();
            p.setFirstname(rs.getString(1));
            p.setLastname(rs.getString(2));
            p.setPhone(rs.getString(3));
            p.setEmail(rs.getString(4));
            p.setInbox(rs.getString(5));
            p.setBirthday(rs.getDate(6));
            Address ad = new Address();
            ad.setPostcode(String.valueOf(rs.getInt(7)));
            ad.setState(rs.getString(8));
            ad.setStreetname(rs.getString(9));
            ad.setStreetnumber(String.valueOf(rs.getInt(10)));
            p.setAdress(ad);
            persons.add(p);
        }
        closeConnection();
        return persons.get(0);
    }
    
    public List<Person> getAllAccounts() throws SQLException, ClassNotFoundException{
        openConnection();
        List<Person> persons = new ArrayList<>();
        PreparedStatement stmt = _connection.prepareStatement("SELECT firstname, lastname, phone, email, inbox, birthday, a.postcode, a.state, a.streetname, a.streetnumber FROM person p JOIN address a ON a.idaddress = p.idaddress");
        ResultSet rs = stmt.executeQuery();
        while(rs.next()) {
            Person p = new Person();
            p.setFirstname(rs.getString(1));
            p.setLastname(rs.getString(2));
            p.setPhone(rs.getString(3));
            p.setEmail(rs.getString(4));
            p.setInbox(rs.getString(5));
            p.setBirthday(rs.getDate(6));
            Address ad = new Address();
            ad.setPostcode(String.valueOf(rs.getInt(7)));
            ad.setState(rs.getString(8));
            ad.setStreetname(rs.getString(9));
            ad.setStreetnumber(String.valueOf(rs.getInt(10)));
            p.setAdress(ad);
            persons.add(p);
        }
        closeConnection();
        return persons;
    }
    
    private Database(){
        //
    }
}
